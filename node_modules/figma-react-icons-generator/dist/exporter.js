"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSvg = void 0;
const figma_api_exporter_1 = __importDefault(require("figma-api-exporter"));
const axios_1 = __importDefault(require("axios"));
const getSvg = (figmaToken, figmaFile, figmaCanva, options) => __awaiter(void 0, void 0, void 0, function* () {
    const defaults = { strokeWidth: 1, strokeColor: '#222222', fillColor: '#222222' };
    try {
        const exporter = yield (0, figma_api_exporter_1.default)(figmaToken);
        const svgsData = yield exporter.getSvgs({
            fileId: figmaFile,
            canvas: figmaCanva,
        });
        const svgs = yield getSvgElement(svgsData.svgs, Object.assign(Object.assign({}, defaults), options));
        svgs.map((svg) => {
            svg.name =
                (svg.name.match(/[a-zA-Z0-9]+/g) || []).map((w) => `${w.charAt(0).toUpperCase()}${w.slice(1)}`).join('') +
                    'Icon';
        });
        return svgs;
    }
    catch (err) {
        process.exit(1);
    }
});
exports.getSvg = getSvg;
const getSvgElement = (data, options) => __awaiter(void 0, void 0, void 0, function* () {
    return Promise.all(data.map((item) => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        try {
            const response = yield axios_1.default.get(item.url);
            return Object.assign(Object.assign({}, item), { data: response.data
                    .replaceAll(/stroke="#[a-fA-F0-9]{6}"/g, `stroke="${options.strokeColor}"`)
                    .replaceAll(/fill="#[a-fA-F0-9]{6}"/g, `fill="${options.fillColor}"`)
                    .replaceAll(/stroke-width="[0-9]{1,2}\.[0-9]{1,2}"/g, `stroke-width="${(_a = options.strokeWidth) === null || _a === void 0 ? void 0 : _a.toString()}"`) });
        }
        catch (err) {
            process.exit(1);
        }
    })));
});
